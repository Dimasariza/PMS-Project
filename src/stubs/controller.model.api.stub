<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use App\Http\Requests\{{ model }}\Create{{ model }}Request;
use App\Http\Requests\{{ model }}\Update{{ model }}Request;
use App\Http\Resources\{{ model }}\{{ model }}CreatedResource;
use App\Http\Resources\{{ model }}\{{ model }}Resource;
use App\Http\Resources\{{ model }}\{{ model }}UpdatedResource;
use App\Repositories\{{ model }}\{{ model }}Repository;
use App\Traits\APIResponse;
use Illuminate\Http\Response;

/**
 * @group {{ model }}
 *
 * APIs for {{ model }}
 */
class {{ class }} extends Controller
{
    use APIResponse;

    public function __construct(
        protected {{ model }}Repository $repository
    ) {  }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        return $this->successResponse(
            {{ model }}Resource::collection(
                $this->repository->getAll(),
            )
        );
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Create{{ model }}Request $request)
    {
        $result = $this->repository->create(
            Create{{ model }}DTO::fromRequest($request),
        );

        return $this->successResponse(
            {{ model }}CreatedResource::make($result),
            'Created',
            Response::HTTP_CREATED,
        );
    }

    /**
     * Display the specified resource.
     */
    public function show(string|int $id)
    {
        return $this->successResponse(
            {{ model }}Resource::make($this->repository->show($id)),
        );
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(string|int $id, Update{{ model }}Request $request)
    {
        $result = $this->repository->update(
            $id,
            Update{{ model }}DTO::fromRequest($request)
        );

        return $this->successResponse(
            {{ model }}UpdatedResource::make($result),
            'Updated',
        );
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string|int $id)
    {
        $this->repository->delete($id);

        return $this->successResponse(null, 'Deleted');
    }
}
