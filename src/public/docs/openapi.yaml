openapi: 3.0.3
info:
  title: 'PMS Project API Documentation'
  description: 'This is the documentation for PMS Project. If there is something wrong, please contact the developer.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:9000'
paths:
  /api/v1/auth/login:
    post:
      summary: Login
      operationId: login
      description: 'Login an user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 200
                  message: Authenticated
                  data:
                    id: 16
                    username: superadmin
                    fullname: 'LeBron Juara NBA 2K23'
                    email: admin@gmail.com
                    workPlace: office
                    status: true
                    document: some_document.pdf
                    createdAt: '2023-04-26 12:56:31'
                    updatedAt: '2023-04-26 12:56:31'
                    department:
                      id: 5
                      name: 'Dr. Destiney Fadel II'
                      code: BY
                      workPlace: "96159 Abernathy Field Suite 772\nCronamouth, WI 79459"
                    title:
                      id: 4
                      name: Admin
                      access:
                        stock: true
                        users: true
                        jobList: true
                        shipList: true
                        dataSheet: true
                        department: true
                        shipDetails: true
                      createdAt: '2023-04-26 12:56:29'
                    token: 2|vQYUWZT1wmiieHl4AhPg3ajkEv1g4mmLVn9tclPh
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Authenticated
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 16
                      username:
                        type: string
                        example: superadmin
                      fullname:
                        type: string
                        example: 'LeBron Juara NBA 2K23'
                      email:
                        type: string
                        example: admin@gmail.com
                      workPlace:
                        type: string
                        example: office
                      status:
                        type: boolean
                        example: true
                      document:
                        type: string
                        example: some_document.pdf
                      createdAt:
                        type: string
                        example: '2023-04-26 12:56:31'
                      updatedAt:
                        type: string
                        example: '2023-04-26 12:56:31'
                      department:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'Dr. Destiney Fadel II'
                          code:
                            type: string
                            example: BY
                          workPlace:
                            type: string
                            example: "96159 Abernathy Field Suite 772\nCronamouth, WI 79459"
                      title:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 4
                          name:
                            type: string
                            example: Admin
                          access:
                            type: object
                            properties:
                              stock:
                                type: boolean
                                example: true
                              users:
                                type: boolean
                                example: true
                              jobList:
                                type: boolean
                                example: true
                              shipList:
                                type: boolean
                                example: true
                              dataSheet:
                                type: boolean
                                example: true
                              department:
                                type: boolean
                                example: true
                              shipDetails:
                                type: boolean
                                example: true
                          createdAt:
                            type: string
                            example: '2023-04-26 12:56:29'
                      token:
                        type: string
                        example: 2|vQYUWZT1wmiieHl4AhPg3ajkEv1g4mmLVn9tclPh
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Username of the user.'
                  example: superadmin
                password:
                  type: string
                  description: 'Password of the user.'
                  example: user1234
              required:
                - username
                - password
      security: []
  /api/v1/auth/logout:
    post:
      summary: Logout
      operationId: logout
      description: 'Logout an user.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer 3|iMxzfuvnFX02IwrhZ8ysPCbwz359xXtR5Rts6QBv'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 200
                  message: 'Logout success'
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Logout success'
      tags:
        - Authentication
  /api/v1/user_title:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 403
                  message: Unauthenticated
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Endpoints
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titleName:
                  type: string
                  description: ''
                  example: cumque
                titleAccess:
                  type: string
                  description: ''
                  example: natus
              required:
                - titleName
                - titleAccess
      security: []
  '/api/v1/user_title/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titleName:
                  type: string
                  description: ''
                  example: autem
                titleAccess:
                  type: string
                  description: ''
                  example: hic
              required:
                - titleName
                - titleAccess
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user title.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/user:
    get:
      summary: ''
      operationId: getApiV1User
      description: ''
      parameters: []
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 403
                  message: Unauthenticated
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Endpoints
      security: []
    post:
      summary: ''
      operationId: postApiV1User
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Must match the regex /^\S*$/u. Must not be greater than 255 characters.'
                  example: qwwzpnmbzocinyi
                fullname:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bpgjml
                departmentId:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: trent.zieme@example.com
                password:
                  type: string
                  description: 'Must be at least 8 characters. Must not be greater than 255 characters.'
                  example: "Bl(Lka':sQFRrr|"
                userTitleId:
                  type: string
                  description: ''
                  example: quisquam
                workPlace:
                  type: string
                  description: 'Must be one of <code>ship</code> or <code>office</code>.'
                  example: ship
                status:
                  type: boolean
                  description: ''
                  example: false
                document:
                  type: string
                  description: ''
                  example: null
              required:
                - username
                - fullname
                - departmentId
                - email
                - password
                - userTitleId
                - workPlace
                - status
      security: []
  '/api/v1/user/{id}':
    get:
      summary: ''
      operationId: getApiV1UserId
      description: ''
      parameters: []
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 403
                  message: Unauthenticated
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Endpoints
      security: []
    put:
      summary: ''
      operationId: putApiV1UserId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jo
                fullname:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gnxpzxyuwdktvt
                departmentId:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: monty.hegmann@example.org
                userTitleId:
                  type: string
                  description: ''
                  example: earum
                workPlace:
                  type: string
                  description: ''
                  example: velit
                status:
                  type: boolean
                  description: 'Must be one of <code>true</code> or <code>false</code>.'
                  example: 'false'
                document:
                  type: string
                  description: ''
                  example: null
              required:
                - username
                - fullname
                - departmentId
                - email
                - userTitleId
                - workPlace
                - status
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: "\nAPIs for authenticating user"
  -
    name: Endpoints
    description: ''
